<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Haki Blog</title>
    <link>https://haki9.github.io/blog/tags/android/</link>
    <description>Recent content in Android on Haki Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://haki9.github.io/blog/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gradle and Groovy</title>
      <link>https://haki9.github.io/blog/android_gradle/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/android_gradle/</guid>
      <description> Step 1. Intall Gradle on Mac brew install gradle Step 2. Write code  task groovy { doLast { println &amp;#34;Hello Gradle&amp;#34; oneArg &amp;#34;10&amp;#34; } } def oneArg(x){ println &amp;#34;value 1 : $x&amp;#34; }  Step 3. Run gradle groovy Done : ) </description>
    </item>
    
    <item>
      <title>Kotlin Coroutines Tutorial (STABLE VERSION) – async / await, withContext, launch</title>
      <link>https://haki9.github.io/blog/android_kotlin_coroutines/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/android_kotlin_coroutines/</guid>
      <description>import kotlinx.coroutines.* import java.util.concurrent.ExecutorService import java.util.concurrent.Executors fun main(args: Array&amp;lt;String&amp;gt;) { exampleWithContext() } suspend fun printlnDelayed(message: String) { // Complex calculation delay(1000) println(message) } suspend fun calculateHardThings(startNum: Int): Int { delay(1000) return startNum * 10 } fun exampleBlocking() = runBlocking { println(&amp;quot;one&amp;quot;) printlnDelayed(&amp;quot;two&amp;quot;) println(&amp;quot;three&amp;quot;) } // Running on another thread but still blocking the main thread fun exampleBlockingDispatcher(){ runBlocking(Dispatchers.Default) { println(&amp;quot;one - from thread ${Thread.currentThread().name}&amp;quot;) printlnDelayed(&amp;quot;two - from thread ${Thread.currentThread().name}&amp;quot;) } // Outside of runBlocking to show that it&#39;s running in the blocked main thread println(&amp;quot;three - from thread ${Thread.</description>
    </item>
    
    <item>
      <title>Learn Kotlin Quickly - Constructors And Properties</title>
      <link>https://haki9.github.io/blog/android_kotlin_constructor/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/android_kotlin_constructor/</guid>
      <description>Constructor  class Person (private var name: String, private var age: Int){ init { println(&amp;#34;Person $name was created!&amp;#34;) } constructor(name: String): this(name, Random().nextInt()){ println(&amp;#34;Secondary contructor was invoked!&amp;#34;) } fun describeYourself() = println(&amp;#34;My name is $name and I am $age years old.&amp;#34;) }  Properties  class Computer{ var cost = 500f val name = &amp;#34;Apple&amp;#34; lateinit var currentUser: String val isExpensive : Boolean get() = cost &amp;gt; 1000 var properties: String = &amp;#34;&amp;#34; set(value) { field = value println(&amp;#34;Properties were changed&amp;#34;) } var id = 10 private set init { this.</description>
    </item>
    
    <item>
      <title>Mastering Kotlin standard functions: run, with, let, also and apply</title>
      <link>https://haki9.github.io/blog/kolin/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/kolin/</guid>
      <description>Some of the Kotlin’s standard functions are so similar that we are not sure which to use. Here I will introduce a simple way to clearly distinguish their differences and how to pick which to use.
 Everything you need in picture ^_^   Reference: Medium</description>
    </item>
    
    <item>
      <title>Build PJSIP with openh264</title>
      <link>https://haki9.github.io/blog/android_pjsip_build_lib/</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/android_pjsip_build_lib/</guid>
      <description>Step 1. Download openh264  Unzip file and move to /User/me Create new folder: android in openh264 folder Modified OpenH264&amp;rsquo;s Makefile by setting PREFIX=android And  make OS=android NDKROOT=&amp;lt;path-to-ndk&amp;gt; TARGET=android-19 APP_ABI=armeabi ARCH=arm make OS=android NDKROOT=&amp;lt;path-to-ndk&amp;gt; TARGET=android-19 APP_ABI=armeabi ARCH=arm clean make install OS=android NDKROOT=&amp;lt;path-to-ndk&amp;gt; TARGET=android-19 APP_ABI=armeabi ARCH=arm    Step 2. Create config_site.h  Download pjsip from repository Create config_site.h Go to /path/to/your/pjsip/dir/pjlib/include/pj Copy config_site_sample.h Rename copy file to config_site.</description>
    </item>
    
    <item>
      <title>SIP in Androird with Linphone</title>
      <link>https://haki9.github.io/blog/android_linphone/</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/android_linphone/</guid>
      <description>EasyPhone This is a simple project with Linphone.
This requires the linphone SDK 3.x. It&amp;rsquo;s not compatable with 4.x versions currently available
Linphone document : Here
EasyPhone - GitHub: Here
Download easy-phone.aar: Here
Download liblinphone-sdk-release-3.4.1: Here
How to Include an External .aar File Using Gradle? Here</description>
    </item>
    
    <item>
      <title>Android Web Links</title>
      <link>https://haki9.github.io/blog/website_android_links/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/website_android_links/</guid>
      <description>Networking https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki
Code Stlye https://blog.mindorks.com/android-code-style-and-guidelines-d5f80453d5c7</description>
    </item>
    
    <item>
      <title>Import new module to Android Project</title>
      <link>https://haki9.github.io/blog/android_add_module/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/android_add_module/</guid>
      <description> Step 1. Download Module Unzip module after finish download
Step 2. Import Module Follow the following steps:
 File &amp;gt; New &amp;gt; Import Module Choose Source Directory and Finish Go to Settings.gradle add include &#39;:module_name&#39; File &amp;gt; Project Structure &amp;gt; Dependencies &amp;gt; Add(+) OR Add implementation project(&#39;:sipservice&#39;) in build.gradle(App)  </description>
    </item>
    
    <item>
      <title>Include an External .aar File</title>
      <link>https://haki9.github.io/blog/android_add_aar_file/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/android_add_aar_file/</guid>
      <description>There are 2 ways to do that
First Way: Using Android Studio Menu File -&amp;gt; New -&amp;gt; New Module -&amp;gt; Import .jar/.aar and import your .aar
Then in your project’s build.gradle (the one under ‘app’) add the following:  dependencies { compile project(‘:Name-of-the-Project’) }  Clean Build after all the above steps.
Second Way: By Creating libs Folder Follow the following steps:
 Create ‘libs’ folder under src/main Copy your .</description>
    </item>
    
    <item>
      <title>Plugin with id &#39;com.github.dcendents.android-maven-plugin&#39; not found</title>
      <link>https://haki9.github.io/blog/androidpluginnotfound/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://haki9.github.io/blog/androidpluginnotfound/</guid>
      <description> Problem Plugin with id &amp;lsquo;com.github.dcendents.android-maven-plugin&amp;rsquo; not found
Fix  buildscript { repositories { jcenter() } dependencies { classpath &amp;#39;com.github.dcendents:android-maven-gradle-plugin:1.5&amp;#39; classpath &amp;#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3&amp;#39; } } apply plugin: &amp;#39;com.android.library&amp;#39; apply plugin: &amp;#39;com.android.library&amp;#39; apply plugin: &amp;#39;com.github.dcendents.android-maven&amp;#39; apply plugin: &amp;#39;com.github.dcendents.android-maven&amp;#39; apply plugin: &amp;#39;com.jfrog.bintray&amp;#39; apply plugin: &amp;#39;com.jfrog.bintray&amp;#39;  </description>
    </item>
    
  </channel>
</rss>